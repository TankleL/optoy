/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Author: Mingxin Wang (mingxwa@microsoft.com)
 */

#ifndef SRC_MAIN_P0957_PROXY_H_
#define SRC_MAIN_P0957_PROXY_H_

#include <new>
#include <type_traits>
#include <utility>
#include <typeinfo>
#include <tuple>
#include <concepts>

namespace std {

enum class constraint_level { none, nontrivial, nothrow, trivial };

template <class T, auto F> struct facade_operation;
template <class R, class... Args, auto F>
struct facade_operation<R(Args...), F> {
  using return_type = R;
  using argument_types = tuple<Args...>;
  static constexpr auto invoker = F;
  facade_operation() = delete;
};

template <class... Os>
struct facade {
  using operations = tuple<Os...>;
  static constexpr size_t pointer_max_size = sizeof(void*) * 2u;
  static constexpr size_t pointer_max_alignment = alignof(void*);
  static constexpr constraint_level pointer_copyability =
      constraint_level::none;
  static constexpr constraint_level pointer_relocatability =
      constraint_level::nothrow;
  static constexpr constraint_level pointer_destructibility =
      constraint_level::nothrow;
  facade() = delete;
};

namespace detail {

struct applicable_traits { static constexpr bool applicable = true; };
struct inapplicable_traits { static constexpr bool applicable = false; };

template <class T>
constexpr bool has_copyability(constraint_level level) {
  switch (level) {
    case constraint_level::trivial: return is_trivially_copy_constructible_v<T>;
    case constraint_level::nothrow: return is_nothrow_copy_constructible_v<T>;
    case constraint_level::nontrivial: return is_copy_constructible_v<T>;
    case constraint_level::none: return true;
    default: return false;
  }
}
template <class T>
constexpr bool has_relocatability(constraint_level level) {
  switch (level) {
    case constraint_level::trivial:
      return is_trivially_move_constructible_v<T> &&
          is_trivially_destructible_v<T>;
    case constraint_level::nothrow:
      return is_nothrow_move_constructible_v<T> && is_nothrow_destructible_v<T>;
    case constraint_level::nontrivial:
      return is_move_constructible_v<T> && is_destructible_v<T>;
    case constraint_level::none: return true;
    default: return false;
  }
}
template <class T>
constexpr bool has_destructibility(constraint_level level) {
  switch (level) {
    case constraint_level::trivial: return is_trivially_destructible_v<T>;
    case constraint_level::nothrow: return is_nothrow_destructible_v<T>;
    case constraint_level::nontrivial: return is_destructible_v<T>;
    case constraint_level::none: return true;
    default: return false;
  }
}

template <class P> struct pointer_traits : inapplicable_traits {};
template <class P> requires requires(P ptr) { { *ptr }; }
struct pointer_traits<P> : applicable_traits
    { using value_type = decltype(*declval<P&>()); };

template <class T, class... Us>
struct index_traits : integral_constant<size_t, 0u> {};
template <class T, class U, class... Us> requires (!is_same_v<T, U>)
struct index_traits<T, U, Us...>
    : integral_constant<size_t, index_traits<T, Us...>::value + 1u> {};

template <class O, class ArgumentTuple>
struct facade_operation_traits_impl : inapplicable_traits {};
template <class O, class... Args>
struct facade_operation_traits_impl<O, tuple<Args...>> : applicable_traits {
  using function_type = typename O::return_type (*)(char*, Args...);

  template <class T>
  static constexpr bool applicable_operand = requires(T operand, Args... args)
      { { O::invoker(forward<T>(operand), forward<Args>(args)...) }; };

  template <class P>
  static typename O::return_type invoke(char* p, Args... args)
      { return O::invoker(**reinterpret_cast<P*>(p), forward<Args>(args)...); }
};

template <class O>
struct facade_operation_traits : inapplicable_traits {};
template <class O> requires requires {
      typename O::return_type;
      typename O::argument_types;
      { O::invoker };
    }
struct facade_operation_traits<O>
    : facade_operation_traits_impl<O, typename O::argument_types> {};

struct empty_meta { template <class _> constexpr explicit empty_meta(_) {} };
struct copy_meta {
  template <class P>
  constexpr explicit copy_meta(in_place_type_t<P>)
      : clone([](char* self, const char* rhs)
            { new(self) P(*reinterpret_cast<const P*>(rhs)); }) {}

  void (*clone)(char*, const char*);
};
struct relocation_meta {
  template <class P>
  constexpr explicit relocation_meta(in_place_type_t<P>)
      : relocate([](char* self, char* rhs) {
              new(self) P(move(*reinterpret_cast<P*>(rhs)));
              reinterpret_cast<P*>(rhs)->~P();
            }) {}

  void (*relocate)(char*, char*);
};
struct destruction_meta {
  template <class P>
  constexpr explicit destruction_meta(in_place_type_t<P>)
      : destroy([](char* self) { reinterpret_cast<P*>(self)->~P(); }) {}

  void (*destroy)(char*);
};
template <constraint_level C, class M>
using conditional_meta = conditional_t<C == constraint_level::nontrivial ||
    C == constraint_level::nothrow, M, empty_meta>;
template <constraint_level CC, constraint_level RC, constraint_level DC,
    class... Os>
struct proxy_meta : conditional_meta<CC, copy_meta>,
    conditional_meta<RC, relocation_meta>,
    conditional_meta<DC, destruction_meta> {
  template <class P>
  constexpr explicit proxy_meta(in_place_type_t<P>)
      : conditional_meta<CC, copy_meta>(in_place_type<P>),
        conditional_meta<RC, relocation_meta>(in_place_type<P>),
        conditional_meta<DC, destruction_meta>(in_place_type<P>),
        get_type([]() -> const type_info& { return typeid(P); }),
        op_functions(facade_operation_traits<Os>::template invoke<P>...) {}

  const type_info&(*get_type)();
  tuple<typename facade_operation_traits<Os>::function_type...> op_functions;
};

template <class T, class U> struct flattening_traits_impl;
template <class T>
struct flattening_traits_impl<tuple<>, T> { using type = T; };
template <class T, class... Ts, class U>
struct flattening_traits_impl<tuple<T, Ts...>, U>
    : flattening_traits_impl<tuple<Ts...>, U> {};
template <class T, class... Ts, class... Us>
    requires (index_traits<T, Us...>::value == sizeof...(Us))
struct flattening_traits_impl<tuple<T, Ts...>, tuple<Us...>>
    : flattening_traits_impl<tuple<Ts...>, tuple<Us..., T>> {};
template <class T> struct flattening_traits { using type = tuple<T>; };
template <> struct flattening_traits<tuple<>> { using type = tuple<>; };
template <class T, class... Ts>
struct flattening_traits<tuple<T, Ts...>> : flattening_traits_impl<
    typename flattening_traits<T>::type,
    typename flattening_traits<tuple<Ts...>>::type> {};

template <class F, class OperationTuple>
struct facade_traits_impl : inapplicable_traits {};
template <class F, class... Os>
struct facade_traits_impl<F, tuple<Os...>> : applicable_traits {
  template <class P>
  static constexpr bool applicable_pointer = sizeof(P) <= F::pointer_max_size &&
      alignof(P) <= F::pointer_max_alignment &&
      has_copyability<P>(F::pointer_copyability) &&
      has_relocatability<P>(F::pointer_relocatability) &&
      has_destructibility<P>(F::pointer_destructibility) &&
      (facade_operation_traits<Os>::applicable && ...) &&
      (facade_operation_traits<Os>::template applicable_operand<
          typename pointer_traits<P>::value_type> && ...);

  using meta_type = proxy_meta<F::pointer_copyability,
      F::pointer_relocatability, F::pointer_destructibility, Os...>;

  template <class O>
  static constexpr size_t operation_index = index_traits<O, Os...>::value;

  template <class O>
  static constexpr bool has_operation = operation_index<O> < sizeof...(Os);
};
template <class F> struct facade_traits : inapplicable_traits {};
template <class F> requires requires {
      typename F::operations;
      { F::pointer_max_size } -> convertible_to<size_t>;
      { F::pointer_max_alignment } -> convertible_to<size_t>;
      { F::pointer_copyability } -> convertible_to<constraint_level>;
      { F::pointer_relocatability } -> convertible_to<constraint_level>;
      { F::pointer_destructibility } -> convertible_to<constraint_level>;
    }
struct facade_traits<F> : facade_traits_impl<
    F, typename flattening_traits<typename F::operations>::type> {};

template <class F, class P>
constexpr typename facade_traits<F>::meta_type META_STORAGE{in_place_type<P>};

}  // namespace detail

class bad_proxy_cast : public std::exception {
 public:
  const char* what() const noexcept override { return "Bad proxy cast"; }
};

template <class P, class F>
concept proxiable = detail::facade_traits<F>::applicable &&
    detail::pointer_traits<P>::applicable &&
    detail::facade_traits<F>::template applicable_pointer<P>;

template <class F> requires detail::facade_traits<F>::applicable
class proxy {
 public:
  proxy() { meta_ = nullptr; }
  proxy(nullptr_t) : proxy() {}
  proxy(const proxy& rhs)
      noexcept(F::pointer_copyability >= constraint_level::nothrow)
      requires(F::pointer_copyability >= constraint_level::nontrivial) {
    if (rhs.meta_ != nullptr) {
      if constexpr (F::pointer_copyability == constraint_level::trivial) {
        memcpy(ptr_, rhs.ptr_, F::pointer_max_size);
      } else {
        rhs.meta_->clone(ptr_, rhs.ptr_);
      }
      meta_ = rhs.meta_;
    } else {
      meta_ = nullptr;
    }
  }
  proxy(proxy&& rhs)
      noexcept(F::pointer_relocatability >= constraint_level::nothrow)
      requires(F::pointer_relocatability >= constraint_level::nontrivial) {
    if (rhs.meta_ != nullptr) {
      if constexpr (F::pointer_relocatability == constraint_level::trivial) {
        memcpy(ptr_, rhs.ptr_, F::pointer_max_size);
      } else {
        rhs.meta_->relocate(ptr_, rhs.ptr_);
      }
      meta_ = rhs.meta_;
      rhs.meta_ = nullptr;
    } else {
      meta_ = nullptr;
    }
  }
  template <class P>
  proxy(P&& ptr) noexcept(is_nothrow_constructible_v<decay_t<P>, P>)
      requires(proxiable<decay_t<P>, F>)
      : proxy(in_place_type<decay_t<P>>, forward<P>(ptr)) {}
  proxy& operator=(nullptr_t) { proxy temp; swap(temp); return *this; }
  template <class P, class... Args>
  explicit proxy(in_place_type_t<P>, Args&&... args)
      noexcept(is_nothrow_constructible_v<P, Args...>)
      requires(proxiable<P, F>) {
    new(ptr_) P(forward<Args>(args)...);
    meta_ = &detail::META_STORAGE<F, P>;
  }
  proxy& operator=(const proxy& rhs)
      noexcept(F::pointer_copyability >= constraint_level::nothrow &&
          F::pointer_destructibility >= constraint_level::nothrow)
      requires(F::pointer_copyability >= constraint_level::nontrivial &&
          F::pointer_destructibility >= constraint_level::nontrivial)
      { proxy temp{rhs}; swap(temp); return *this; }
  proxy& operator=(proxy&& rhs)
      noexcept(F::pointer_relocatability >= constraint_level::nothrow &&
          F::pointer_destructibility >= constraint_level::nothrow)
      requires(F::pointer_relocatability >= constraint_level::nontrivial &&
          F::pointer_destructibility >= constraint_level::nontrivial)
      { swap(rhs); rhs.reset(); return *this; }
  template <class P>
  proxy& operator=(P&& ptr)
      noexcept(is_nothrow_constructible_v<decay_t<P>, P> &&
          F::pointer_relocatability >= constraint_level::nothrow &&
          F::pointer_destructibility >= constraint_level::nothrow)
      requires(proxiable<decay_t<P>, F> &&
          F::pointer_destructibility >= constraint_level::nontrivial)
      { proxy temp{forward<P>(ptr)}; swap(temp); return *this; }
  ~proxy() noexcept(F::pointer_destructibility >= constraint_level::nothrow)
      requires(F::pointer_destructibility >= constraint_level::nontrivial) {
    if constexpr (F::pointer_destructibility != constraint_level::trivial) {
      if (meta_ != nullptr) {
        meta_->destroy(ptr_);
      }
    }
  }

  bool has_value() const noexcept { return meta_ != nullptr; }
  const type_info& type() const noexcept
      { return meta_ == nullptr ? typeid(void) : meta_->get_type(); }
  void reset() noexcept(F::pointer_destructibility >= constraint_level::nothrow)
      requires(F::pointer_destructibility >= constraint_level::nontrivial)
      { this->~proxy(); meta_ = nullptr; }
  void swap(proxy& rhs)
      noexcept(F::pointer_relocatability >= constraint_level::nothrow)
      requires(F::pointer_relocatability >= constraint_level::nontrivial) {
    if (meta_ != nullptr) {
      if (rhs.meta_ != nullptr) {
        alignas(F::pointer_max_alignment) char temp[F::pointer_max_size];
        if constexpr (F::pointer_relocatability == constraint_level::trivial) {
          memcpy(temp, ptr_, F::pointer_max_size);
          memcpy(ptr_, rhs.ptr_, F::pointer_max_size);
          memcpy(rhs.ptr_, temp, F::pointer_max_size);
        } else {
          meta_->relocate(temp, ptr_);
          rhs.meta_->relocate(ptr_, rhs.ptr_);
          meta_->relocate(rhs.ptr_, temp);
        }
      } else {
        if constexpr (F::pointer_relocatability == constraint_level::trivial) {
          memcpy(rhs.ptr_, ptr_, F::pointer_max_size);
        } else {
          meta_->relocate(rhs.ptr_, ptr_);
        }
      }
    } else if (rhs.meta_ != nullptr) {
      if constexpr (F::pointer_relocatability == constraint_level::trivial) {
        memcpy(ptr_, rhs.ptr_, F::pointer_max_size);
      } else {
        rhs.meta_->relocate(ptr_, rhs.ptr_);
      }
    } else {
      return;
    }
    std::swap(meta_, rhs.meta_);
  }
  template <class P, class... Args>
  P& emplace(Args&&... args) noexcept(is_nothrow_constructible_v<P, Args...> &&
          F::pointer_relocatability >= constraint_level::nothrow &&
          F::pointer_destructibility >= constraint_level::nothrow)
      requires(proxiable<P, F> &&
          F::pointer_destructibility >= constraint_level::nontrivial) {
    reset();
    proxy temp{in_place_type<P>, forward<Args>(args)...};
    swap(temp);
    return *reinterpret_cast<P*>(ptr_);
  }
  template <class P>
  P& cast() requires proxiable<P, F> {
    if (type() != typeid(P)) {
      throw bad_proxy_cast{};
    }
    return *reinterpret_cast<P*>(ptr_);
  }
  template <class O, class... Args>
  decltype(auto) invoke(Args&&... args)
      requires (detail::facade_traits<F>::template has_operation<O> &&
          is_convertible_v<tuple<Args...>, typename O::argument_types>) {
    return get<detail::facade_traits<F>::template operation_index<O>>(
        meta_->op_functions)(ptr_, forward<Args>(args)...);
  }

 private:
  const typename detail::facade_traits<F>::meta_type* meta_;
  alignas(F::pointer_max_alignment) char ptr_[F::pointer_max_size];
};

namespace detail {

template <class T>
class sbo_ptr {
 public:
  template <class... Args>
  sbo_ptr(Args&&... args) : value_(forward<Args>(args)...) {}
  sbo_ptr(const sbo_ptr&) noexcept(is_nothrow_copy_constructible_v<T>)
      = default;
  sbo_ptr(sbo_ptr&&) noexcept(is_nothrow_move_constructible_v<T>) = default;

  T& operator*() { return value_; }

 private:
  T value_;
};

template <class T>
class deep_ptr {
 public:
  template <class... Args>
  deep_ptr(Args&&... args) : ptr_(new T(forward<Args>(args)...)) {}
  deep_ptr(const deep_ptr& rhs) noexcept(is_nothrow_copy_constructible_v<T>)
      requires(is_copy_constructible_v<T>)
      : ptr_(rhs.ptr_ == nullptr ? nullptr : new T(*rhs)) {}
  deep_ptr(deep_ptr&& rhs) noexcept : ptr_(rhs.ptr_) { rhs.ptr_ = nullptr; }
  ~deep_ptr() noexcept { delete ptr_; }

  T& operator*() const { return *ptr_; }

 private:
  T* ptr_;
};

}  // namespace detail

template <class F, class T, class... Args>
proxy<F> make_proxy(Args&&... args) {
  if constexpr (proxiable<detail::sbo_ptr<T>, F>) {
    return proxy<F>{in_place_type<detail::sbo_ptr<T>>, forward<Args>(args)...};
  } else {
    return proxy<F>{in_place_type<detail::deep_ptr<T>>, forward<Args>(args)...};
  }
}
template <class F, class T, class U, class... Args>
proxy<F> make_proxy(initializer_list<U> il, Args&&... args)
    { return make_proxy<F, T>(il, forward<Args>(args)...); }
template <class F, class T>
proxy<F> make_proxy(T&& value)
    { return make_proxy<F, decay_t<T>>(forward<T>(value)); }

}  // namespace std

#endif  // SRC_MAIN_P0957_PROXY_H_
